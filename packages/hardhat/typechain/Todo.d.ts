/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TodoInterface extends ethers.utils.Interface {
  functions: {
    "createTodo(string)": FunctionFragment;
    "getTodos()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "createTodo", values: [string]): string;
  encodeFunctionData(functionFragment: "getTodos", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodos", data: BytesLike): Result;

  events: {
    "TodoItemCreated(uint256,string,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TodoItemCreated"): EventFragment;
}

export type TodoItemCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, boolean] & {
    todoItemId: BigNumber;
    text: string;
    user: string;
    createdAt: BigNumber;
    completed: boolean;
  }
>;

export class Todo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TodoInterface;

  functions: {
    createTodo(
      _text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTodos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, string, BigNumber, boolean] & {
          todoId: BigNumber;
          text: string;
          user: string;
          createdAt: BigNumber;
          completed: boolean;
        })[]
      ]
    >;
  };

  createTodo(
    _text: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTodos(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, string, BigNumber, boolean] & {
      todoId: BigNumber;
      text: string;
      user: string;
      createdAt: BigNumber;
      completed: boolean;
    })[]
  >;

  callStatic: {
    createTodo(_text: string, overrides?: CallOverrides): Promise<void>;

    getTodos(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, string, BigNumber, boolean] & {
        todoId: BigNumber;
        text: string;
        user: string;
        createdAt: BigNumber;
        completed: boolean;
      })[]
    >;
  };

  filters: {
    "TodoItemCreated(uint256,string,address,uint256,bool)"(
      todoItemId?: BigNumberish | null,
      text?: null,
      user?: null,
      createdAt?: null,
      completed?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, boolean],
      {
        todoItemId: BigNumber;
        text: string;
        user: string;
        createdAt: BigNumber;
        completed: boolean;
      }
    >;

    TodoItemCreated(
      todoItemId?: BigNumberish | null,
      text?: null,
      user?: null,
      createdAt?: null,
      completed?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, boolean],
      {
        todoItemId: BigNumber;
        text: string;
        user: string;
        createdAt: BigNumber;
        completed: boolean;
      }
    >;
  };

  estimateGas: {
    createTodo(
      _text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTodos(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createTodo(
      _text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTodos(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
