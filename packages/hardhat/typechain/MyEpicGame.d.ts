/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface MyEpicGameInterface extends ethers.utils.Interface {
  functions: {
    'approve(address,uint256)': FunctionFragment
    'attackBoss()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'bigBoss()': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'mintCharacterNFT(uint256)': FunctionFragment
    'name()': FunctionFragment
    'nftHolderAttributes(uint256)': FunctionFragment
    'nftHolders(address)': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'attackBoss', values?: undefined): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'bigBoss', values?: undefined): string
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string
  encodeFunctionData(functionFragment: 'mintCharacterNFT', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nftHolderAttributes', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'nftHolders', values: [string]): string
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'attackBoss', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bigBoss', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintCharacterNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nftHolderAttributes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nftHolders', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string
    approved: string
    tokenId: BigNumber
  }
>

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string
    operator: string
    approved: boolean
  }
>

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>

export class MyEpicGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: MyEpicGameInterface

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    attackBoss(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    bigBoss(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        name: string
        imageURI: string
        hp: BigNumber
        maxHp: BigNumber
        attackDamage: BigNumber
      }
    >

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>

    mintCharacterNFT(
      _characterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    nftHolderAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
        characterIndex: BigNumber
        name: string
        imageURI: string
        hp: BigNumber
        maxHp: BigNumber
        attackDamage: BigNumber
      }
    >

    nftHolders(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  attackBoss(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  bigBoss(overrides?: CallOverrides): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      name: string
      imageURI: string
      hp: BigNumber
      maxHp: BigNumber
      attackDamage: BigNumber
    }
  >

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

  mintCharacterNFT(
    _characterIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  nftHolderAttributes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
      characterIndex: BigNumber
      name: string
      imageURI: string
      hp: BigNumber
      maxHp: BigNumber
      attackDamage: BigNumber
    }
  >

  nftHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    attackBoss(overrides?: CallOverrides): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    bigBoss(overrides?: CallOverrides): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        name: string
        imageURI: string
        hp: BigNumber
        maxHp: BigNumber
        attackDamage: BigNumber
      }
    >

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

    mintCharacterNFT(_characterIndex: BigNumberish, overrides?: CallOverrides): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    nftHolderAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber] & {
        characterIndex: BigNumber
        name: string
        imageURI: string
        hp: BigNumber
        maxHp: BigNumber
        attackDamage: BigNumber
      }
    >

    nftHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >
  }

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    attackBoss(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    bigBoss(overrides?: CallOverrides): Promise<BigNumber>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>

    mintCharacterNFT(
      _characterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    nftHolderAttributes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    nftHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    attackBoss(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    bigBoss(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mintCharacterNFT(
      _characterIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nftHolderAttributes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    nftHolders(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
